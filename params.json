{"name":"OpenHomity","tagline":"Extensible Open Source Home Automation Suite","body":"# Welcome to the OpenHomity project!\r\nOpenHomity is an open source home automation suite capable of controlling a variety of objects around the house, including -\r\n* Switches - light, power\r\n* Sensors - digital (door, presence), analog (temperature, light)\r\n* Garage Doors \r\n* Camera Systems\r\n* Door Locks \r\n* Alarm Systems \r\n\r\nThis project is written such that each of the above objects is abstracted from any specific product, vendor, or implementation, allowing devices to be supported through pluggable drivers contributed by users or vendors.\r\n\r\nThis project is still in active development, so not all of the objects above are currently supported.\r\n\r\n# Components\r\n##Homity Hub\r\nThe [homity-hub](http://github.com/openhomity/homity-hub) is the central brain of the home automation system.  It communicates with and controls/monitors each southbound subsystem - spokes, garages, cameras, alarms, and locks.  In addition, it communicates with any northbound clients via an open RESTful API.\r\n\r\nThe Homity Hub software is written in Python using the Flask framework, and is backed by a CouchDB NoSQL database.  It is lightweight enough to run on a [Raspberry Pi](http://www.raspberrypi.org) or [BeagleBone Black](http://beagleboard.org/products/beaglebone%20black), or in a virtual machine. \r\n\r\n###Spoke\r\nA Spoke is one object that can be controlled by the Homity Hub.  It contains one or more pins, where each pin can either be analog or digital, input or output.  Therefore, a pin can take the following personalities -\r\n* Switch - digital & output, examples - light switch, power switch\r\n* Digital Sensor - digital & input, examples - door open sensor, presence sensor\r\n* Analog Sensor - analog & input, examples - light sensor, temperature sensor\r\n\r\nThe spoke take the form of a variety of devices, from an Arduino with multiple input & output pins to a smart light switch with just one.  The Hub can support any type of spoke a driver has been written to support.\r\n\r\nThe [homity-spoke](http://github.com/openhomity/homity-spoke) repository has sample code for a spoke based on an [Arduino Uno ethernet](http://arduino.cc/en/Main/ArduinoBoardEthernet), supported by the SpokeRestDuinoDriver on the homity-hub.\r\n\r\n###Garage Controller\r\nA Garage Controller is another object that can be controlled by the Homity Hub.  It contains one or more garages, where each garage represents a door that can be opened or closed, or powered on or off.  \r\n\r\nThe [homity-spoke](http://github.com/openhomity/homity-spoke) repository has sample code for a garage controller based on an [Arduino Uno ethernet](http://arduino.cc/en/Main/ArduinoBoardEthernet), supported by the GarageRestDuinoDriver on the Homity Hub.  Suggestions on how to wire up the GarageRestDuino controller can be found [here](http://mydooropener.com/index.html).\r\n\r\n###Camera Controller\r\nA Camera Controller is another object that can be controlled by the Homity Hub.  It contains one or more cameras, where each camera has the following properties - on, recording, alerting.  On indicates whether the camera is currently powered on, recording indicates if the video stream is being recorded, and alerting indicates whether motion alerts are enabled.\r\n\r\nThe [homity-hub](http://github.com/openhomity/homity-hub) repository currently has driver support for the [Blue Iris](http://www.blueirissoftware.com) camera controller software.\r\n\r\n##Homity Client\r\nThe [homity-client](http://github.com/openhomity/homity-client) is both a Python client-side library for interfacing with the Hub via RESTful API, as well as a linux command line tool for managing all aspects of the Hub.  \r\n\r\nThe client can be installed on the same hardware as the Hub, or on a remote linux host, or both.\r\n\r\n##Homity App\r\nWork in progress - an iOS app that acts as a client of the Homity Hub to allow easy interaction with objects.\r\n\r\n##Additional Components (to be added)\r\n* Locks - initial support will include [Lockitron](http://www.lockitron.com), but can & will expand to include Schlage and other connected door locks.\r\n* Alarm Systems - haven't found one with an open API yet, but we'll include the abstractions to support any down the line, as well as homegrown alarm systems.\r\n\r\n# Getting started\r\n## What you'll need\r\n\r\n* A hardhat\r\n    * This project is in very early stages, so there is some assembly required\r\n* A linux host\r\n    * The code is lightweight enough to run on a Raspberry Pi, BeagleBone Black, or a VM\r\n* One or more objects to control\r\n    * Currently the hub supports arduino-based spokes & garage controllers, and BlueIris camera systems.  Abstractions to be added for locks & alarm systems.  Feel free to add drivers.\r\n\r\n## Setting it up\r\n### Set up arduino-based spoke and/or garage controller\r\n* Download [arduino IDE](http://www.arduino.cc)\r\n* Download SpokeRestDuino.ino from [homity-spoke repo](http://github.com/openhomity/homity-spoke)\r\n* Open SpokeRestDuino.ino in the arduino IDE\r\n* Modify MAC, IP, and serial/ID values\r\n* Modify configuration for number & configuration of garage doors (if applicable)\r\n* Compile & upload to arduino\r\n* Plug something clever into the arduino\r\n    * [PowerSwitch Tail II](http://www.powerswitchtail.com/Pages/default.aspx)\r\n    * Door Sensor\r\n    * Temperature Sensor\r\n    * Garage door sensor/relay\r\n\r\n### Installing, Configuring, & Starting the Hub\r\n```\r\n# Install Needed Linux & Python Packages\r\n$ sudo apt-get install -y git couchdb python-pip curl python-dev libssl-dev\r\n$ sudo pip install couchdb flask pyopenssl\r\n\r\n# Create Log/Config Directories\r\n$ sudo mkdir /etc/homity/\r\n$ sudo chown <your_linux_username> /etc/homity\r\n$ sudo mkdir /var/log/homity\r\n$ sudo chown <your_linux_username> /var/log/homity\r\n\r\n# Clone Git Repo Into HomeDir, Run Initial Setup Script\r\n$ cd ~\r\n$ git clone git://github.com/openhomity/homity-hub.git\r\n$ cd homity-hub/\r\n$ python initialsetup.py <hub_user_username> <hub_user__password>\r\n# -- Replace args with username & password you want clients to use when connecting.\r\n\r\n# Optional - Enable SSL\r\n$ cd ~\r\n$ mkdir certs\r\n$ openssl req  -nodes -new -x509  -keyout server.key -out server.cert\r\n## Modify /etc/homity/homityhub.conf to enable SSL & reference key & cert files\r\n\r\n# Start The Server\r\n$ python runhub.py &\r\n```\r\n\r\n### Install & Configure the Client\r\n```\r\n# Install Needed Linux & Python Packages\r\n$ sudo pip install requests prettytable six\r\n\r\n# Create Config Directory <-- if setting up on different machine than the Hub\r\n$ sudo mkdir /etc/homity/\r\n$ sudo chown <your_linux_username> /etc/homity\r\n\r\n# Clone the Git repo\r\n$ cd ~\r\n$ git clone git://github.com/openhomity/homity-client.git\r\n\r\n# Configure with username & password\r\n$ cd homity-client/\r\n$ cp default.conf /etc/homity/homityclient.conf\r\n$ vi /etc/homity/homityclient.conf \r\n# -- Set username & password to hub_user_username and hub_user_password set during hub setup.  Set server if Hub is remote. Enable SSL if enabled on server.\r\n\r\n# Make alias to easily run CLIs.\r\n$ alias homity='python ~/homity-client/homityshell.py' \r\n```\r\n\r\n### Client Introduction\r\n```\r\n#Display full list of commands\r\n$ homity\r\nusage: homity [-d] [-v] [--timeout TIMEOUT] <subcommand> ...\r\n\r\nHomity CLI\r\n\r\nPositional arguments:\r\n  <subcommand>\r\n    pin-list            List pins.\r\n    pin-schedule-add    Insert a new schedule entry.\r\n    pin-schedule-delete\r\n                        Delete a schedule entry.\r\n    pin-show            Show a pin.\r\n    pin-update          Update a pin.\r\n    spoke-create        Create a new spoke.\r\n    spoke-delete        Delete a spoke.\r\n    spoke-driver-list   List available spoke drivers.\r\n    spoke-list          List spokes.\r\n    spoke-pin-list      List pins for an spoke.\r\n    spoke-show          Show an spoke's pin.\r\n    spoke-update        Update a spoke's settings.\r\n    garage-controller-create\r\n                        Create a new garage_controller.\r\n    garage-controller-delete\r\n                        Delete a garage_controller.\r\n    garage-controller-driver-list\r\n                        List available garage_controller drivers.\r\n    garage-controller-garage-list\r\n                        List garages for an garage_controller.\r\n    garage-controller-list\r\n                        List garage_controller.\r\n    garage-controller-show\r\n                        Show a garage_controller.\r\n    garage-controller-update\r\n                        Update a garage_controller's settings.\r\n    garage-list         List garages.\r\n    garage-show         Show a garage.\r\n    garage-update       Update a garage.\r\n    camera-controller-camera-list\r\n                        List cameras for an camera_controller.\r\n    camera-controller-create\r\n                        Create a new camera_controller.\r\n    camera-controller-delete\r\n                        Delete a camera_controller.\r\n    camera-controller-driver-list\r\n                        List available camera_controller drivers.\r\n    camera-controller-list\r\n                        List camera_controller.\r\n    camera-controller-show\r\n                        Show a camera_controller.\r\n    camera-controller-update\r\n                        Update a camera_controller's settings.\r\n    camera-list         List cameras.\r\n    camera-show         Show a camera.\r\n    camera-update       Update a camera.\r\n    help                Display help about this program or one of its\r\n                        subcommands.\r\n\r\nOptional arguments:\r\n  -d, --debug           Defaults to False\r\n  -v, --verbose         Print more verbose output\r\n  --timeout TIMEOUT     Number of seconds to wait for a response\r\n\r\nSee \"homity help COMMAND\" for help on a specific command.\r\n\r\n```\r\n### Working with Spokes & Pins\r\n```\r\n# Display available spoke drivers\r\n$ homity spoke-driver-list\r\n[u'SpokeRestDuinoDriver']\r\n\r\n# Display list of currently associated spokes.  Since we're new, this is empty.\r\n$ homity spoke-list\r\n\r\n# Create a new spoke object to point at the arduino you just set up.  This will return active=True if found.\r\n$ homity spoke-create LivingRoom SpokeRestDuinoDriver address=http://192.168.1.250:8080/\r\n+-------------+---------------------------------------------+\r\n| Property    | Value                                       |\r\n+-------------+---------------------------------------------+\r\n| id          | c81be5df8c93d4135271e5b81900115f            |\r\n| name        | LivingRoom                                  |\r\n| active      | True                                        |\r\n| driver      | SpokeRestDuinoDriver                        |\r\n| driver_info | {u'address': u'http://192.168.1.250:8080/'} |\r\n+-------------+---------------------------------------------+\r\n\r\n# Display all pins available on the spoke along with configuration & current status\r\n$ homity spoke-pin-list c81be5df8c93d4135271e5b81900115f\r\n+----------------------------------+------+-----+-----------+---------+--------+--------+\r\n| UUID                             | Name | Num | Allocated | Digital | Output | Status |\r\n+----------------------------------+------+-----+-----------+---------+--------+--------+\r\n| 100938effdff4e3bbcb75118c569bbb3 |      | 9   | False     | True    | True   | False  |\r\n| 1abc8cf04c824392bb2f8a90af87ae21 |      | A4  | False     | False   | False  | 215    |\r\n| 481e72fecd9a4bda9ec7fbb91138ec21 |      | 7   | False     | True    | True   | False  |\r\n| 4c1eece1a68c4f75b4eaa6eac11b5653 |      | 3   | False     | True    | True   | False  |\r\n| 637d351c098940019bab376dfaf7cb0b |      | A5  | False     | False   | False  | 183    |\r\n| 81f0cddb0a814d9390a110fdb0b2b693 |      | 5   | False     | True    | True   | False  |\r\n| 832fb12cd4374345a1b33253e5463a61 |      | A3  | False     | False   | False  | 187    |\r\n| b34c6f3d215140cd9a12381c05e39a5b |      | A0  | False     | False   | False  | 190    |\r\n| c4f82a04539d4f6cac5bbf9763e0e212 |      | A2  | False     | False   | False  | 205    |\r\n| d769b31c314f4749b37c1aaf6cca1011 |      | A1  | False     | False   | False  | 214    |\r\n| f3f03ed61b22400b91465df2a100ec8a |      | 8   | False     | True    | True   | False  |\r\n+----------------------------------+------+-----+-----------+---------+--------+--------+\r\n\r\n# We've plugged a PowerSwitch Tail II into pin 5, so lets use that to control a Lamp.  First, lets display detailed pin information for this spoke's pin 5:\r\n$ homity pin-show 81f0cddb0a814d9390a110fdb0b2b693\r\n+-----------+----------------------------------+\r\n| Property  | Value                            |\r\n+-----------+----------------------------------+\r\n| id        | 81f0cddb0a814d9390a110fdb0b2b693 |\r\n| location  | LivingRoom                       |\r\n| name      |                                  |\r\n| num       | 5                                |\r\n| allocated | False                            |\r\n| digital   | True                             |\r\n| output    | True                             |\r\n| schedule  | []                               |\r\n| status    | False                            |\r\n| spoke     | None                             |\r\n+-----------+----------------------------------+\r\n\r\n# To put the pin in use, give it a name, and change allocated to True\r\n$ homity pin-update 81f0cddb0a814d9390a110fdb0b2b693 allocated=True name=Lamp\r\n+-----------+----------------------------------+\r\n| Property  | Value                            |\r\n+-----------+----------------------------------+\r\n| id        | 81f0cddb0a814d9390a110fdb0b2b693 |\r\n| location  | LivingRoom                       |\r\n| name      | Lamp                             |\r\n| num       | 5                                |\r\n| allocated | True                             |\r\n| digital   | True                             |\r\n| output    | True                             |\r\n| schedule  | []                               |\r\n| status    | False                            |\r\n| spoke     | None                             |\r\n+-----------+----------------------------------+\r\n\r\n# Once allocated, it will show up in the pin list\r\n$ homity pin-list\r\n+----------------------------------+------------+------------+------+-----+-----------+---------+--------+--------+\r\n| UUID                             | Spoke UUID | Location   | Name | Num | Allocated | Digital | Output | Status |\r\n+----------------------------------+------------+------------+------+-----+-----------+---------+--------+--------+\r\n| 81f0cddb0a814d9390a110fdb0b2b693 | None       | LivingRoom | Lamp | 5   | True      | True    | True   | False  |\r\n+----------------------------------+------------+------------+------+-----+-----------+---------+--------+--------+\r\n\r\n# Lets turn the lamp on by setting status to True\r\n$ homity pin-update 81f0cddb0a814d9390a110fdb0b2b693 status=True\r\n+-----------+----------------------------------+\r\n| Property  | Value                            |\r\n+-----------+----------------------------------+\r\n| id        | 81f0cddb0a814d9390a110fdb0b2b693 |\r\n| location  | LivingRoom                       |\r\n| name      | Lamp                             |\r\n| num       | 5                                |\r\n| allocated | True                             |\r\n| digital   | True                             |\r\n| output    | True                             |\r\n| schedule  | []                               |\r\n| status    | True                             |\r\n| spoke     | None                             |\r\n+-----------+----------------------------------+\r\n\r\n# Lets set a timer.  The command below will configure the lamp to turn on (true, false for off) at 16:30 every day (0-6, 0 = Sunday).  These fields follow standard crontab syntax rules.  Google them. \r\n$ homity pin-schedule-add 81f0cddb0a814d9390a110fdb0b2b693 30 16 0-6 true\r\n+-----------+------------------------------------------------------------------------+\r\n| Property  | Value                                                                  |\r\n+-----------+------------------------------------------------------------------------+\r\n| id        | 81f0cddb0a814d9390a110fdb0b2b693                                       |\r\n| location  | LivingRoom                                                             |\r\n| name      | Lamp                                                                   |\r\n| num       | 5                                                                      |\r\n| allocated | True                                                                   |\r\n| digital   | True                                                                   |\r\n| output    | True                                                                   |\r\n| schedule  | [{u'action': True, u'hour': u'16', u'minute': u'30', u'days': u'0-6'}] |\r\n| status    | True                                                                   |\r\n| spoke     | None                                                                   |\r\n+-----------+------------------------------------------------------------------------+\r\n```\r\n### Working with Garages\r\n```\r\n$ homity garage-controller-driver-list\r\n[u'GarageRestDuinoDriver']\r\n\r\n$ homity garage-controller-list\r\n\r\n$ homity garage-controller-create MyGarage GarageRestDuinoDriver address=http://192.168.1.251:8080/\r\n+-------------+---------------------------------------------+\r\n| Property    | Value                                       |\r\n+-------------+---------------------------------------------+\r\n| id          | 1f4e22869d940096e2ce3e3bbd003127            |\r\n| name        | MyGarage                                    |\r\n| active      | True                                        |\r\n| driver      | GarageRestDuinoDriver                       |\r\n| driver_info | {u'address': u'http://192.168.1.251:8080/'} |\r\n+-------------+---------------------------------------------+\r\n\r\n$ homity garage-controller-list\r\n+----------------------------------+------------+--------+-----------------------+\r\n| UUID                             | Name       | Active | Driver                |\r\n+----------------------------------+------------+--------+-----------------------+\r\n| 1f4e22869d940096e2ce3e3bbd003127 | MyGarage   | True   | GarageRestDuinoDriver |\r\n+----------------------------------+------------+--------+-----------------------+\r\n\r\nRest TBD...\r\n```\r\n### Working with Cameras\r\n```\r\nComing soon...\r\n```\r\n# FAQ\r\n**How do I ask a question or get technical support?**\r\nStill working this out...\r\n\r\n**How can I contribute?**\r\nGreat!  Feel free to fork the repo, make your changes, and submit a pull request.  Style/test requirements coming soon...\r\n\r\n**When will you support -insert product here-**\r\nIf its cool we'll get to it soon enough.  Feel free to write a driver yourself and submit a pull request!\r\n\r\n# Authors and Contributors\r\nInitial work done by (@wochanda).  Hopefully more folks will get involved and we'll add names to the list.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}